
//Q-1 ) https://leetcode.com/problems/the-k-weakest-rows-in-a-matrix/

var kWeakestRows = function(mat, k) {
      return mat.reduce((acc, row, index) => {
        let left = 0;
        let right = row.length - 1;
        
        while(left <= right) {
            let mid = Math.floor( (left + right) / 2);
            
            if(row[mid]) {
                left = mid + 1;
            } else {
                right = mid - 1;    
            }
        }
        
        acc.push({ index, value: left });
        
        return acc;
    }, []).sort((a, b) => a.value - b.value).splice(0, k).map(item => item.index);
    
    
};